// <auto-generated />
using System;
using AntaresApi;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AntaresApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240113142517_kikut")]
    partial class kikut
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AntaresApi.Models.Car.Car", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Bought")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Brand")
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateData1")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateData2")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("DoubleData1")
                        .HasColumnType("double");

                    b.Property<double?>("DoubleData2")
                        .HasColumnType("double");

                    b.Property<int?>("IntData1")
                        .HasColumnType("int");

                    b.Property<int?>("IntData2")
                        .HasColumnType("int");

                    b.Property<int?>("Max")
                        .HasColumnType("int");

                    b.Property<int?>("Min")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Produced")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("StoreModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("TextData1")
                        .HasColumnType("longtext");

                    b.Property<string>("TextData2")
                        .HasColumnType("longtext");

                    b.Property<string>("TextData3")
                        .HasColumnType("longtext");

                    b.Property<string>("TextData4")
                        .HasColumnType("longtext");

                    b.Property<string>("Vin")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("StoreModelId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("AntaresApi.Models.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HouseAndLocalNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("PostCode")
                        .HasColumnType("longtext");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("StreetName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("StoreModelId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("AntaresApi.Models.Comparator", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Comparators");
                });

            modelBuilder.Entity("AntaresApi.Models.Document._Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateTo")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("DocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("longblob");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreModelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StoreModelId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("AntaresApi.Models.Document._DocumentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("AntaresApi.Models.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Bsn")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HouseAndLocalNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("Pesel")
                        .HasColumnType("longtext");

                    b.Property<string>("PostCode")
                        .HasColumnType("longtext");

                    b.Property<long?>("PreviousStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("PrivatePhone")
                        .HasColumnType("longtext");

                    b.Property<long?>("RecruitmentContactId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RecruitmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Salt")
                        .HasColumnType("longtext");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("StreetName")
                        .HasColumnType("longtext");

                    b.Property<string>("SubCity")
                        .HasColumnType("longtext");

                    b.Property<string>("SubHouseAndLocalNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("SubPostcode")
                        .HasColumnType("longtext");

                    b.Property<string>("SubStreetName")
                        .HasColumnType("longtext");

                    b.Property<bool?>("Verified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("VerifyToken")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PreviousStatusId");

                    b.HasIndex("RecruitmentContactId");

                    b.HasIndex("RecruitmentId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StoreModelId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("AntaresApi.Models.House.House", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("HouseAndLocalNumber")
                        .HasColumnType("longtext");

                    b.Property<int?>("Max")
                        .HasColumnType("int");

                    b.Property<int?>("Min")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .HasColumnType("longtext");

                    b.Property<long>("StoreModelId")
                        .HasColumnType("bigint");

                    b.Property<string>("StreetName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("StoreModelId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("AntaresApi.Models.Mail.Mail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Mails");
                });

            modelBuilder.Entity("AntaresApi.Models.Offer.Offer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("Global")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<long?>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ImageId");

                    b.HasIndex("PositionId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("AntaresApi.Models.Plan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("CompanyId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Stop")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("AntaresApi.Models.Position.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Demand")
                        .HasColumnType("double");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("EmploymentQty")
                        .HasColumnType("int");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long>("PositionUnitId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreModelId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PositionUnitId");

                    b.HasIndex("StoreModelId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("AntaresApi.Models.Position.PositionUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PositionUnits");
                });

            modelBuilder.Entity("AntaresApi.Models.Realisation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long?>("ActionFunctionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ComparatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateValue")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("HouseId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("MadeByUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("NumericValue")
                        .HasColumnType("double");

                    b.Property<long?>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<long>("VariantId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VariantRealisationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionFunctionId");

                    b.HasIndex("ComparatorId");

                    b.HasIndex("HouseId");

                    b.HasIndex("PositionId");

                    b.HasIndex("VariantId");

                    b.HasIndex("VariantRealisationId");

                    b.ToTable("Realisations");
                });

            modelBuilder.Entity("AntaresApi.Models.Recruitment.Recruitment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("OfferId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Open")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreModelId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("OfferId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.HasIndex("StoreModelId");

                    b.ToTable("Recruitments");
                });

            modelBuilder.Entity("AntaresApi.Models.Recruitment.RecruitmentContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Done")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Link")
                        .HasColumnType("longtext");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RecruitmentContacts");
                });

            modelBuilder.Entity("AntaresApi.Models.Status.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<bool>("Reserved")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreModelId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("StoreModelId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("AntaresApi.Models.StatusAction.ActionFunction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("MailId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<long>("StoreModelId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SystemFunctionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MailId");

                    b.HasIndex("PositionId");

                    b.HasIndex("StoreModelId");

                    b.HasIndex("SystemFunctionId");

                    b.ToTable("ActionFunctions");
                });

            modelBuilder.Entity("AntaresApi.Models.StatusAction.StatusAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("ActionFunctionId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusActionTriggerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActionFunctionId");

                    b.HasIndex("StatusActionTriggerId");

                    b.ToTable("StatusActions");
                });

            modelBuilder.Entity("AntaresApi.Models.StatusAction.StatusActionTrigger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("StatusActionTriggers");
                });

            modelBuilder.Entity("AntaresApi.Models.StoreModel.StoreModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("StoreModels");
                });

            modelBuilder.Entity("AntaresApi.Models.SystemFunction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SystemFunctions");
                });

            modelBuilder.Entity("AntaresApi.Models.Variant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool?>("Global")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StoreModelId")
                        .HasColumnType("bigint");

                    b.Property<long>("VariantTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("StoreModelId");

                    b.HasIndex("VariantTypeId");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("AntaresApi.Models.VariantRealisation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long?>("VariantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantRealisations");
                });

            modelBuilder.Entity("AntaresApi.Models.VariantType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("VariantTypes");
                });

            modelBuilder.Entity("CarCompany", b =>
                {
                    b.Property<long>("CarsId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompaniesId")
                        .HasColumnType("bigint");

                    b.HasKey("CarsId", "CompaniesId");

                    b.HasIndex("CompaniesId");

                    b.ToTable("CarCompany");
                });

            modelBuilder.Entity("CarEmployee", b =>
                {
                    b.Property<long>("PassengerCarsId")
                        .HasColumnType("bigint");

                    b.Property<long>("PassengersId")
                        .HasColumnType("bigint");

                    b.HasKey("PassengerCarsId", "PassengersId");

                    b.HasIndex("PassengersId");

                    b.ToTable("CarEmployee");
                });

            modelBuilder.Entity("CarEmployee1", b =>
                {
                    b.Property<long>("DriverCarsId")
                        .HasColumnType("bigint");

                    b.Property<long>("DriversId")
                        .HasColumnType("bigint");

                    b.HasKey("DriverCarsId", "DriversId");

                    b.HasIndex("DriversId");

                    b.ToTable("CarEmployee1");
                });

            modelBuilder.Entity("CarHouse", b =>
                {
                    b.Property<long>("CarsId")
                        .HasColumnType("bigint");

                    b.Property<long>("HousesId")
                        .HasColumnType("bigint");

                    b.HasKey("CarsId", "HousesId");

                    b.HasIndex("HousesId");

                    b.ToTable("CarHouse");
                });

            modelBuilder.Entity("CarRealisation", b =>
                {
                    b.Property<long>("CarsId")
                        .HasColumnType("bigint");

                    b.Property<long>("RealisationsId")
                        .HasColumnType("bigint");

                    b.HasKey("CarsId", "RealisationsId");

                    b.HasIndex("RealisationsId");

                    b.ToTable("CarRealisation");
                });

            modelBuilder.Entity("Car_Document", b =>
                {
                    b.Property<long>("CarsId")
                        .HasColumnType("bigint");

                    b.Property<long>("DocumentsId")
                        .HasColumnType("bigint");

                    b.HasKey("CarsId", "DocumentsId");

                    b.HasIndex("DocumentsId");

                    b.ToTable("Car_Document");
                });

            modelBuilder.Entity("CompanyEmployee", b =>
                {
                    b.Property<long>("CompaniesId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeesId")
                        .HasColumnType("bigint");

                    b.HasKey("CompaniesId", "EmployeesId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("CompanyEmployee");
                });

            modelBuilder.Entity("CompanyHouse", b =>
                {
                    b.Property<long>("CompaniesId")
                        .HasColumnType("bigint");

                    b.Property<long>("HousesId")
                        .HasColumnType("bigint");

                    b.HasKey("CompaniesId", "HousesId");

                    b.HasIndex("HousesId");

                    b.ToTable("CompanyHouse");
                });

            modelBuilder.Entity("CompanyRealisation", b =>
                {
                    b.Property<long>("CompaniesId")
                        .HasColumnType("bigint");

                    b.Property<long>("RealisationsId")
                        .HasColumnType("bigint");

                    b.HasKey("CompaniesId", "RealisationsId");

                    b.HasIndex("RealisationsId");

                    b.ToTable("CompanyRealisation");
                });

            modelBuilder.Entity("Company_Document", b =>
                {
                    b.Property<long>("CompaniesId")
                        .HasColumnType("bigint");

                    b.Property<long>("DocumentsId")
                        .HasColumnType("bigint");

                    b.HasKey("CompaniesId", "DocumentsId");

                    b.HasIndex("DocumentsId");

                    b.ToTable("Company_Document");
                });

            modelBuilder.Entity("EmployeeHouse", b =>
                {
                    b.Property<long>("EmployeesId")
                        .HasColumnType("bigint");

                    b.Property<long>("HousesId")
                        .HasColumnType("bigint");

                    b.HasKey("EmployeesId", "HousesId");

                    b.HasIndex("HousesId");

                    b.ToTable("EmployeeHouse");
                });

            modelBuilder.Entity("EmployeePlan", b =>
                {
                    b.Property<long>("EmployeesId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlansId")
                        .HasColumnType("bigint");

                    b.HasKey("EmployeesId", "PlansId");

                    b.HasIndex("PlansId");

                    b.ToTable("EmployeePlan");
                });

            modelBuilder.Entity("EmployeePosition", b =>
                {
                    b.Property<long>("EmployeesId")
                        .HasColumnType("bigint");

                    b.Property<long>("PositionsId")
                        .HasColumnType("bigint");

                    b.HasKey("EmployeesId", "PositionsId");

                    b.HasIndex("PositionsId");

                    b.ToTable("EmployeePosition");
                });

            modelBuilder.Entity("EmployeeRealisation", b =>
                {
                    b.Property<long>("EmployeesId")
                        .HasColumnType("bigint");

                    b.Property<long>("RealisationsId")
                        .HasColumnType("bigint");

                    b.HasKey("EmployeesId", "RealisationsId");

                    b.HasIndex("RealisationsId");

                    b.ToTable("EmployeeRealisation");
                });

            modelBuilder.Entity("Employee_Document", b =>
                {
                    b.Property<long>("DocumentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeesId")
                        .HasColumnType("bigint");

                    b.HasKey("DocumentsId", "EmployeesId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("Employee_Document");
                });

            modelBuilder.Entity("House_Document", b =>
                {
                    b.Property<long>("DocumentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("HousesId")
                        .HasColumnType("bigint");

                    b.HasKey("DocumentsId", "HousesId");

                    b.HasIndex("HousesId");

                    b.ToTable("House_Document");
                });

            modelBuilder.Entity("Mail_Document", b =>
                {
                    b.Property<long>("DocumentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("MailsId")
                        .HasColumnType("bigint");

                    b.HasKey("DocumentsId", "MailsId");

                    b.HasIndex("MailsId");

                    b.ToTable("Mail_Document");
                });

            modelBuilder.Entity("Realisation_Document", b =>
                {
                    b.Property<long>("DocumentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("RealisationsId")
                        .HasColumnType("bigint");

                    b.HasKey("DocumentsId", "RealisationsId");

                    b.HasIndex("RealisationsId");

                    b.ToTable("Realisation_Document");
                });

            modelBuilder.Entity("RecruitmentVariant", b =>
                {
                    b.Property<long>("RecruitmentsId")
                        .HasColumnType("bigint");

                    b.Property<long>("VariantsId")
                        .HasColumnType("bigint");

                    b.HasKey("RecruitmentsId", "VariantsId");

                    b.HasIndex("VariantsId");

                    b.ToTable("RecruitmentVariant");
                });

            modelBuilder.Entity("Recruitment_DocumentType", b =>
                {
                    b.Property<long>("DocumentTypesId")
                        .HasColumnType("bigint");

                    b.Property<long>("RecruitmentsId")
                        .HasColumnType("bigint");

                    b.HasKey("DocumentTypesId", "RecruitmentsId");

                    b.HasIndex("RecruitmentsId");

                    b.ToTable("Recruitment_DocumentType");
                });

            modelBuilder.Entity("StatusStatusAction", b =>
                {
                    b.Property<long>("StatusActionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusesId")
                        .HasColumnType("bigint");

                    b.HasKey("StatusActionsId", "StatusesId");

                    b.HasIndex("StatusesId");

                    b.ToTable("StatusStatusAction");
                });

            modelBuilder.Entity("StoreModelSystemFunction", b =>
                {
                    b.Property<long>("StoreModelsId")
                        .HasColumnType("bigint");

                    b.Property<long>("SystemFunctionsId")
                        .HasColumnType("bigint");

                    b.HasKey("StoreModelsId", "SystemFunctionsId");

                    b.HasIndex("SystemFunctionsId");

                    b.ToTable("StoreModelSystemFunction");
                });

            modelBuilder.Entity("AntaresApi.Models.Car.Car", b =>
                {
                    b.HasOne("AntaresApi.Models.StoreModel.StoreModel", "StoreModel")
                        .WithMany()
                        .HasForeignKey("StoreModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreModel");
                });

            modelBuilder.Entity("AntaresApi.Models.Company", b =>
                {
                    b.HasOne("AntaresApi.Models.Status.Status", "Status")
                        .WithMany("Companies")
                        .HasForeignKey("StatusId");

                    b.HasOne("AntaresApi.Models.StoreModel.StoreModel", "StoreModel")
                        .WithMany()
                        .HasForeignKey("StoreModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("StoreModel");
                });

            modelBuilder.Entity("AntaresApi.Models.Document._Document", b =>
                {
                    b.HasOne("AntaresApi.Models.Document._DocumentType", "DocumentType")
                        .WithMany("Documents")
                        .HasForeignKey("DocumentTypeId");

                    b.HasOne("AntaresApi.Models.Status.Status", "Status")
                        .WithMany("Documents")
                        .HasForeignKey("StatusId");

                    b.HasOne("AntaresApi.Models.StoreModel.StoreModel", "StoreModel")
                        .WithMany()
                        .HasForeignKey("StoreModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Status");

                    b.Navigation("StoreModel");
                });

            modelBuilder.Entity("AntaresApi.Models.Employee", b =>
                {
                    b.HasOne("AntaresApi.Models.Status.Status", "PreviousStatus")
                        .WithMany("PreviousEmployees")
                        .HasForeignKey("PreviousStatusId");

                    b.HasOne("AntaresApi.Models.Recruitment.RecruitmentContact", "RecruitmentContact")
                        .WithMany()
                        .HasForeignKey("RecruitmentContactId");

                    b.HasOne("AntaresApi.Models.Recruitment.Recruitment", "Recruitment")
                        .WithMany("Employees")
                        .HasForeignKey("RecruitmentId");

                    b.HasOne("AntaresApi.Models.Status.Status", "Status")
                        .WithMany("Employees")
                        .HasForeignKey("StatusId");

                    b.HasOne("AntaresApi.Models.StoreModel.StoreModel", "StoreModel")
                        .WithMany()
                        .HasForeignKey("StoreModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreviousStatus");

                    b.Navigation("Recruitment");

                    b.Navigation("RecruitmentContact");

                    b.Navigation("Status");

                    b.Navigation("StoreModel");
                });

            modelBuilder.Entity("AntaresApi.Models.House.House", b =>
                {
                    b.HasOne("AntaresApi.Models.StoreModel.StoreModel", "StoreModel")
                        .WithMany()
                        .HasForeignKey("StoreModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreModel");
                });

            modelBuilder.Entity("AntaresApi.Models.Offer.Offer", b =>
                {
                    b.HasOne("AntaresApi.Models.Company", "Company")
                        .WithMany("Offers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Document._Document", "Image")
                        .WithMany("Offers")
                        .HasForeignKey("ImageId");

                    b.HasOne("AntaresApi.Models.Position.Position", "Position")
                        .WithMany("Offers")
                        .HasForeignKey("PositionId");

                    b.Navigation("Company");

                    b.Navigation("Image");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("AntaresApi.Models.Plan", b =>
                {
                    b.HasOne("AntaresApi.Models.Company", "Company")
                        .WithMany("Plans")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("AntaresApi.Models.Position.Position", b =>
                {
                    b.HasOne("AntaresApi.Models.Company", "Company")
                        .WithMany("Positions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Position.Position", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AntaresApi.Models.Position.PositionUnit", "PositionUnit")
                        .WithMany()
                        .HasForeignKey("PositionUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.StoreModel.StoreModel", "StoreModel")
                        .WithMany()
                        .HasForeignKey("StoreModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Parent");

                    b.Navigation("PositionUnit");

                    b.Navigation("StoreModel");
                });

            modelBuilder.Entity("AntaresApi.Models.Realisation", b =>
                {
                    b.HasOne("AntaresApi.Models.StatusAction.ActionFunction", null)
                        .WithMany("Requirements")
                        .HasForeignKey("ActionFunctionId");

                    b.HasOne("AntaresApi.Models.Comparator", "Comparator")
                        .WithMany()
                        .HasForeignKey("ComparatorId");

                    b.HasOne("AntaresApi.Models.House.House", null)
                        .WithMany("Requirements")
                        .HasForeignKey("HouseId");

                    b.HasOne("AntaresApi.Models.Position.Position", null)
                        .WithMany("Requirements")
                        .HasForeignKey("PositionId");

                    b.HasOne("AntaresApi.Models.Variant", "Variant")
                        .WithMany()
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.VariantRealisation", "VariantRealisation")
                        .WithMany()
                        .HasForeignKey("VariantRealisationId");

                    b.Navigation("Comparator");

                    b.Navigation("Variant");

                    b.Navigation("VariantRealisation");
                });

            modelBuilder.Entity("AntaresApi.Models.Recruitment.Recruitment", b =>
                {
                    b.HasOne("AntaresApi.Models.Company", null)
                        .WithMany("Recruitments")
                        .HasForeignKey("CompanyId");

                    b.HasOne("AntaresApi.Models.Offer.Offer", "Offer")
                        .WithOne("Recruitment")
                        .HasForeignKey("AntaresApi.Models.Recruitment.Recruitment", "OfferId");

                    b.HasOne("AntaresApi.Models.Status.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.StoreModel.StoreModel", "StoreModel")
                        .WithMany()
                        .HasForeignKey("StoreModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Status");

                    b.Navigation("StoreModel");
                });

            modelBuilder.Entity("AntaresApi.Models.Status.Status", b =>
                {
                    b.HasOne("AntaresApi.Models.Status.Status", null)
                        .WithMany("TransitionTo")
                        .HasForeignKey("StatusId");

                    b.HasOne("AntaresApi.Models.StoreModel.StoreModel", "StoreModel")
                        .WithMany()
                        .HasForeignKey("StoreModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreModel");
                });

            modelBuilder.Entity("AntaresApi.Models.StatusAction.ActionFunction", b =>
                {
                    b.HasOne("AntaresApi.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("AntaresApi.Models.Mail.Mail", "Mail")
                        .WithMany()
                        .HasForeignKey("MailId");

                    b.HasOne("AntaresApi.Models.Position.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");

                    b.HasOne("AntaresApi.Models.StoreModel.StoreModel", "StoreModel")
                        .WithMany()
                        .HasForeignKey("StoreModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.SystemFunction", "SystemFunction")
                        .WithMany()
                        .HasForeignKey("SystemFunctionId");

                    b.Navigation("Company");

                    b.Navigation("Mail");

                    b.Navigation("Position");

                    b.Navigation("StoreModel");

                    b.Navigation("SystemFunction");
                });

            modelBuilder.Entity("AntaresApi.Models.StatusAction.StatusAction", b =>
                {
                    b.HasOne("AntaresApi.Models.StatusAction.ActionFunction", "ActionFunction")
                        .WithMany()
                        .HasForeignKey("ActionFunctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.StatusAction.StatusActionTrigger", "StatusActionTrigger")
                        .WithMany()
                        .HasForeignKey("StatusActionTriggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActionFunction");

                    b.Navigation("StatusActionTrigger");
                });

            modelBuilder.Entity("AntaresApi.Models.Variant", b =>
                {
                    b.HasOne("AntaresApi.Models.Status.Status", null)
                        .WithMany("Variants")
                        .HasForeignKey("StatusId");

                    b.HasOne("AntaresApi.Models.StoreModel.StoreModel", "StoreModel")
                        .WithMany()
                        .HasForeignKey("StoreModelId");

                    b.HasOne("AntaresApi.Models.VariantType", "VariantType")
                        .WithMany()
                        .HasForeignKey("VariantTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoreModel");

                    b.Navigation("VariantType");
                });

            modelBuilder.Entity("AntaresApi.Models.VariantRealisation", b =>
                {
                    b.HasOne("AntaresApi.Models.Variant", "Variant")
                        .WithMany("VariantRealisations")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("CarCompany", b =>
                {
                    b.HasOne("AntaresApi.Models.Car.Car", null)
                        .WithMany()
                        .HasForeignKey("CarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarEmployee", b =>
                {
                    b.HasOne("AntaresApi.Models.Car.Car", null)
                        .WithMany()
                        .HasForeignKey("PassengerCarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("PassengersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarEmployee1", b =>
                {
                    b.HasOne("AntaresApi.Models.Car.Car", null)
                        .WithMany()
                        .HasForeignKey("DriverCarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("DriversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarHouse", b =>
                {
                    b.HasOne("AntaresApi.Models.Car.Car", null)
                        .WithMany()
                        .HasForeignKey("CarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.House.House", null)
                        .WithMany()
                        .HasForeignKey("HousesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarRealisation", b =>
                {
                    b.HasOne("AntaresApi.Models.Car.Car", null)
                        .WithMany()
                        .HasForeignKey("CarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Realisation", null)
                        .WithMany()
                        .HasForeignKey("RealisationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Car_Document", b =>
                {
                    b.HasOne("AntaresApi.Models.Car.Car", null)
                        .WithMany()
                        .HasForeignKey("CarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Document._Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyEmployee", b =>
                {
                    b.HasOne("AntaresApi.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyHouse", b =>
                {
                    b.HasOne("AntaresApi.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.House.House", null)
                        .WithMany()
                        .HasForeignKey("HousesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyRealisation", b =>
                {
                    b.HasOne("AntaresApi.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Realisation", null)
                        .WithMany()
                        .HasForeignKey("RealisationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Company_Document", b =>
                {
                    b.HasOne("AntaresApi.Models.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Document._Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeHouse", b =>
                {
                    b.HasOne("AntaresApi.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.House.House", null)
                        .WithMany()
                        .HasForeignKey("HousesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeePlan", b =>
                {
                    b.HasOne("AntaresApi.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Plan", null)
                        .WithMany()
                        .HasForeignKey("PlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeePosition", b =>
                {
                    b.HasOne("AntaresApi.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Position.Position", null)
                        .WithMany()
                        .HasForeignKey("PositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeRealisation", b =>
                {
                    b.HasOne("AntaresApi.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Realisation", null)
                        .WithMany()
                        .HasForeignKey("RealisationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Employee_Document", b =>
                {
                    b.HasOne("AntaresApi.Models.Document._Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("House_Document", b =>
                {
                    b.HasOne("AntaresApi.Models.Document._Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.House.House", null)
                        .WithMany()
                        .HasForeignKey("HousesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Mail_Document", b =>
                {
                    b.HasOne("AntaresApi.Models.Document._Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Mail.Mail", null)
                        .WithMany()
                        .HasForeignKey("MailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Realisation_Document", b =>
                {
                    b.HasOne("AntaresApi.Models.Document._Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Realisation", null)
                        .WithMany()
                        .HasForeignKey("RealisationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecruitmentVariant", b =>
                {
                    b.HasOne("AntaresApi.Models.Recruitment.Recruitment", null)
                        .WithMany()
                        .HasForeignKey("RecruitmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Variant", null)
                        .WithMany()
                        .HasForeignKey("VariantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Recruitment_DocumentType", b =>
                {
                    b.HasOne("AntaresApi.Models.Document._DocumentType", null)
                        .WithMany()
                        .HasForeignKey("DocumentTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Recruitment.Recruitment", null)
                        .WithMany()
                        .HasForeignKey("RecruitmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StatusStatusAction", b =>
                {
                    b.HasOne("AntaresApi.Models.StatusAction.StatusAction", null)
                        .WithMany()
                        .HasForeignKey("StatusActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.Status.Status", null)
                        .WithMany()
                        .HasForeignKey("StatusesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoreModelSystemFunction", b =>
                {
                    b.HasOne("AntaresApi.Models.StoreModel.StoreModel", null)
                        .WithMany()
                        .HasForeignKey("StoreModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AntaresApi.Models.SystemFunction", null)
                        .WithMany()
                        .HasForeignKey("SystemFunctionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AntaresApi.Models.Company", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Plans");

                    b.Navigation("Positions");

                    b.Navigation("Recruitments");
                });

            modelBuilder.Entity("AntaresApi.Models.Document._Document", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("AntaresApi.Models.Document._DocumentType", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("AntaresApi.Models.House.House", b =>
                {
                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("AntaresApi.Models.Offer.Offer", b =>
                {
                    b.Navigation("Recruitment");
                });

            modelBuilder.Entity("AntaresApi.Models.Position.Position", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Offers");

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("AntaresApi.Models.Recruitment.Recruitment", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("AntaresApi.Models.Status.Status", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Documents");

                    b.Navigation("Employees");

                    b.Navigation("PreviousEmployees");

                    b.Navigation("TransitionTo");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("AntaresApi.Models.StatusAction.ActionFunction", b =>
                {
                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("AntaresApi.Models.Variant", b =>
                {
                    b.Navigation("VariantRealisations");
                });
#pragma warning restore 612, 618
        }
    }
}
